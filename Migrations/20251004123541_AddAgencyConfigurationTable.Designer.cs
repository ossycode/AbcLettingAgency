// <auto-generated />
using System;
using AbcLettingAgency.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AbcLettingAgency.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004123541_AddAgencyConfigurationTable")]
    partial class AddAgencyConfigurationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.Agency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BillingPlan")
                        .HasColumnType("text");

                    b.Property<string>("CompanyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LegalName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long?>("OrgId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ParentAgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("ParentAgencyId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("OrgId", "Name")
                        .IsUnique();

                    b.ToTable("Agencies", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyConfiguration", b =>
                {
                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArrearsEmailDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DefaultCommissionPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("DefaultRentDueDay")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultRentFrequency")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("EnableArrearsEmails")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoBlobId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PrimaryColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("SecondaryColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AgencyId");

                    b.ToTable("AgencyConfigurations", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("AgencyGroups", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyGroupMembership", b =>
                {
                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AgencyId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AgencyGroupMemberships", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyUser", b =>
                {
                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AgencyId", "UserId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("AgencyUsers", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxExempt")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Provider", "StripeCustomerId")
                        .IsUnique();

                    b.ToTable("BillingAccounts", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountDue")
                        .HasColumnType("bigint");

                    b.Property<long>("AmountPaid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HostedInvoiceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PdfUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("AgencyId", "IssuedAt");

                    b.HasIndex("Provider", "ExternalId")
                        .IsUnique();

                    b.ToTable("BillingInvoices", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("BillingAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("TrialEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UnitAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("BillingAccountId");

                    b.HasIndex("Provider", "ExternalId")
                        .IsUnique();

                    b.ToTable("BillingSubscriptions", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingSubscriptionItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("BillingSubscriptionItems", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.ClientLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer");

                    b.Property<long?>("LandlordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenancyId");

                    b.HasIndex("TenantId");

                    b.HasIndex("EntryType", "OccurredAt");

                    b.ToTable("ClientLedgers", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenancyId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UploadedAt");

                    b.ToTable("Documents", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LandlordId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("VatAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenancyId");

                    b.HasIndex("IssueDate", "Status");

                    b.ToTable("Invoices", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Landlord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankIban")
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("BankSort")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId", "Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("AgencyId", "Name");

                    b.ToTable("Landlords", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.MaintenanceJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PropertyId", "Status");

                    b.ToTable("MaintenanceJobs", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Furnished")
                        .HasColumnType("boolean");

                    b.Property<long>("LandlordId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("AgencyId", "Code")
                        .IsUnique()
                        .HasFilter("\"Code\" <> ''");

                    b.ToTable("Properties", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.RentCharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("AmountAfterCommission")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("CommissionDue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("TenancyId", "DueDate");

                    b.HasIndex("TenancyId", "PeriodStart", "PeriodEnd")
                        .IsUnique();

                    b.ToTable("RentCharges", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.RentReceipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("ChargeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Method")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<long>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ChargeId");

                    b.HasIndex("TenancyId", "ReceivedAt");

                    b.ToTable("RentReceipts", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CommissionPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DepositAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("DepositLocation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LandlordId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ManagementFeePercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("ManagementStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextChargeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RenewalDueOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RentAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("RentDueDay")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("AgencyId", "Status");

                    b.ToTable("Tenancies", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.TenancyTenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OccupancyEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OccupancyStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ResponsibilitySharePercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<long>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("TenancyId")
                        .IsUnique()
                        .HasFilter("\"IsPrimary\" = TRUE");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenancyId", "TenantId")
                        .IsUnique();

                    b.ToTable("TenancyTenants", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecondEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SecondPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgencyId", "Email")
                        .IsUnique()
                        .HasFilter("\"Email\" <> ''");

                    b.HasIndex("AgencyId", "Phone")
                        .HasFilter("\"Phone\" <> ''");

                    b.ToTable("Tenants", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Update", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LandlordId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenancyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserDeletedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdatedId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenancyId");

                    b.HasIndex("TenantId");

                    b.ToTable("Updates", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.Shared.Events.OutboxLeaseRow", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("AbcLettingAgency.Shared.Events.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DeadLetteredUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DedupKey")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LockedUntilUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OccurredUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("ProcessedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DeadLetteredUtc");

                    b.HasIndex("ProcessedUtc");

                    b.HasIndex("Type", "DedupKey")
                        .IsUnique()
                        .HasFilter("\"DedupKey\" IS NOT NULL");

                    b.ToTable("outbox_messages", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.Agency", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "ParentAgency")
                        .WithMany("Children")
                        .HasForeignKey("ParentAgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AbcLettingAgency.EntityModel.Agencies.Address", "Address", b1 =>
                        {
                            b1.Property<long>("AgencyId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("Address_CountryCode");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Address_Line1");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Address_Line2");

                            b1.Property<string>("Line3")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Address_Line3");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Address_PostCode");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_Region");

                            b1.HasKey("AgencyId");

                            b1.ToTable("Agencies", "public");

                            b1.WithOwner()
                                .HasForeignKey("AgencyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ParentAgency");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyConfiguration", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "Agency")
                        .WithOne("Configuration")
                        .HasForeignKey("AbcLettingAgency.EntityModel.Agencies.AgencyConfiguration", "AgencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyGroupMembership", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "Agency")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.AgencyGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyUser", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingAccount", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingSubscription", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.BillingAccount", "BillingAccount")
                        .WithMany()
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("BillingAccount");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.BillingSubscriptionItem", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.BillingSubscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.ClientLedger", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Landlord", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Ledger")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Tenancy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Document", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Invoice", "Invoice")
                        .WithMany("Documents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany("Documents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Documents")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenant", "Tenant")
                        .WithMany("Documents")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Invoice");

                    b.Navigation("Property");

                    b.Navigation("Tenancy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Invoice", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Landlord", null)
                        .WithMany("Invoices")
                        .HasForeignKey("LandlordId");

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany("Invoices")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany()
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("Tenancy");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Landlord", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.MaintenanceJob", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany("Maintenance")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Property", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Landlord", "Landlord")
                        .WithMany("Properties")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.RentCharge", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Charges")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenancy");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.RentReceipt", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.RentCharge", "Charge")
                        .WithMany("Receipts")
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Receipts")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("Tenancy");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenancy", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Landlord", "Landlord")
                        .WithMany("Tenancies")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany("Tenancies")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.TenancyTenant", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Occupants")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Tenant", "Tenant")
                        .WithMany("TenancyLinks")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenancy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenant", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Update", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.Agencies.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.Landlord", "Landlord")
                        .WithMany("Updates")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Property", "Property")
                        .WithMany("Updates")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenancy", "Tenancy")
                        .WithMany("Updates")
                        .HasForeignKey("TenancyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AbcLettingAgency.EntityModel.Tenant", "Tenant")
                        .WithMany("Updates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Landlord");

                    b.Navigation("Property");

                    b.Navigation("Tenancy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AbcLettingAgency.EntityModel.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AbcLettingAgency.EntityModel.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.Agency", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Configuration");

                    b.Navigation("GroupMemberships");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Agencies.AgencyGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Invoice", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Landlord", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Properties");

                    b.Navigation("Tenancies");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Property", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Invoices");

                    b.Navigation("Maintenance");

                    b.Navigation("Tenancies");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.RentCharge", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenancy", b =>
                {
                    b.Navigation("Charges");

                    b.Navigation("Documents");

                    b.Navigation("Ledger");

                    b.Navigation("Occupants");

                    b.Navigation("Receipts");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("AbcLettingAgency.EntityModel.Tenant", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("TenancyLinks");

                    b.Navigation("Updates");
                });
#pragma warning restore 612, 618
        }
    }
}
